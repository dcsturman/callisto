warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:26:19
   |
26 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/authentication.rs:54:9
   |
54 | /         info!(
55 | |             "(authenticate_google_user) Received and processing login request. {:?}",
56 | |             code
57 | |         );
   | |_________- in this macro invocation
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/authentication.rs:73:9
   |
73 | /         debug!(
74 | |             "(authenticate_google_user) Make request of Google with client_id {:?}.",
75 | |             self.credentials.client_id
76 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |         #[cfg(not(coverage))]
   |                   ^^^^^^^^
   |
  ::: src/authentication.rs:87:9
   |
87 |         debug!("(authenticate_google_user) Fetched token response.");
   |         ------------------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/authentication.rs:115:9
    |
115 | /         debug!(
116 | |             "(authenticate_google_user) Found matching public key {:?}.",
117 | |             public_key
118 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:123:9
    |
123 |         debug!("(authenticate_google_user) Created decoding key and now validating.");
    |         ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:141:9
    |
141 |         debug!("(authenticate_google_user) Token validated.");
    |         ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:161:9
    |
161 |         info!("Created session key for user: {}", email);
    |         ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/authentication.rs:135:13
    |
135 | /             debug!(
136 | |                 "(authenticate_google_user) Token expired at time {} vs now {}",
137 | |                 token_data.claims.exp, now
138 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:180:9
    |
180 |         debug!("(Authenticator.check_authorization) Authorization header found.",);
    |         -------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/authentication.rs:200:25
    |
200 | /                         error!(
201 | |                             "(Authenticator.check_authorization) Invalid session key: {:?}",
202 | |                             e
203 | |                         );
    | |_________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:226:9
    |
226 |         debug!("(validate_google_token) Fetched Google public keys.",);
    |         -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/authentication.rs:229:9
    |
229 | /         debug!(
230 | |             "(validate_google_token) Body of key response is :{:?}",
231 | |             text
232 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/authentication.rs:259:5
    |
259 |     debug!("Load Google credentials file \"{}\".", file_name);
    |     --------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/combat.rs:35:5
   |
35 | /     debug!("(Combat.attack) Calculating range with attacker {} at {:?}, defender {} at {:?}.  Distance is {}.  Range is {}. Range_mod is {}", attacker.get_name(), attacker.get_position(), defender.get_name(), defender.get_position(), (defender.get_position() - attacker.get_position()).magnitude(), find_range_band((defender.get_position() - attacker.get...
36 | |             (defender.get_position() - attacker.get_position()).magnitude() as usize,
37 | |         )]);
   | |___________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/combat.rs:38:5
   |
38 | /     debug!(
39 | |         "(Combat.attack) Ship {} attacking with {:?} against {} with hit mod {} and range {}",
40 | |         attacker_name,
41 | |         weapon,
...  |
46 | |         )]
47 | |     );
   | |_____- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/combat.rs:69:5
   |
69 | /     debug!(
70 | |         "(Combat.attack) {}'s attack roll is {} and hits {}.",
71 | |         attacker_name,
72 | |         hit_roll,
73 | |         defender.get_name()
74 | |     );
   | |_____- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/combat.rs:86:5
   |
86 | /     debug!(
87 | |         "(Combat.attack) {} does {} damage to {}: hit effect {}, defender armor {}",
88 | |         attacker_name,
89 | |         damage,
...  |
92 | |         defender.get_current_armor()
93 | |     );
   | |_____- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:157:5
    |
157 | /     debug!(
158 | |         "(Combat.attack) After modifiers {} does {} damage to {}.",
159 | |         attacker_name,
160 | |         damage,
161 | |         defender.get_name()
162 | |     );
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:189:5
    |
189 | /     debug!(
190 | |         "(Combat.attack) Secondary crits {} to {}.",
191 | |         secondary_crit,
192 | |         defender.get_name()
193 | |     );
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/combat.rs:57:9
   |
57 | /         debug!(
58 | |             "(Combat.attack) {}'s attack roll is {} and misses.",
59 | |             attacker_name, hit_roll
60 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:168:9
    |
168 | /         debug!(
169 | |             "(Combat.attack) Primary crit level {} to {}.",
170 | |             hit_roll - CRITICAL_THRESHOLD,
171 | |             defender.get_name()
172 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:212:5
    |
212 | /     debug!(
213 | |         "(Combat.do_critical) {} suffers crits: {:?}.",
214 | |         defender.get_name(),
215 | |         effects
216 | |     );
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:232:9
    |
232 | /         debug!(
233 | |             "(Combat.apply_crit) {} suffers > level 6 crit to {:?} for {}.",
234 | |             defender.get_name(),
235 | |             location,
236 | |             damage
237 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:359:21
    |
359 | /                     debug!(
360 | |                         "(Combat.apply_crit) Weapon pick {} from active weapons for {} of {:?}.",
361 | |                         pick,
362 | |                         defender.get_name(),
363 | |                         defender.active_weapons
364 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/combat.rs:508:13
    |
508 |             debug!("(Combat.do_fire_actions) Process fire action {:?}.", action);
    |             -------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/combat.rs:522:13
    |
522 |             debug!("(Combat.do_fire_actions) {:?}.", weapon);
    |             ------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:523:13
    |
523 | /             debug!(
524 | |                 "(Combat.do_fire_actions) active_weapons={:?}.",
525 | |                 attacker.active_weapons
526 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:512:17
    |
512 | /                 debug!(
513 | |                     "(Combat.do_fire_actions) No such target {} for fire action.",
514 | |                     action.target
515 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:528:17
    |
528 | /                 debug!(
529 | |                     "(Combat.do_fire_actions) Weapon {} is disabled.",
530 | |                     action.weapon_id
531 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:552:21
    |
552 | /                     debug!(
553 | |                         "(Combat.do_fire_actions) {} launches {} missile at {}.",
554 | |                         attacker.get_name(),
555 | |                         num_missiles,
556 | |                         target.get_name()
557 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:568:21
    |
568 | /                     debug!(
569 | |                         "(Combat.do_fire_actions) {} fires {} at {} with lasers.",
570 | |                         attacker.get_name(),
571 | |                         String::from(&weapon.kind),
572 | |                         target.get_name()
573 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:579:33
    |
579 | / ...                   debug!(
580 | | ...                       "(Combat.do_fire_actions) {}'s sand successfully deployed against {} with effect {}.",
581 | | ...                       target.get_name(),
582 | | ...                       attacker.get_name(),
583 | | ...                       effect
584 | | ...                   );
    | |_______________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:593:33
    |
593 | / ...                   debug!(
594 | | ...                       "(Combat.do_fire_actions) {}'s sand failed to deploy against {} with effect {}.",
595 | | ...                       target.get_name(),
596 | | ...                       attacker.get_name(),
597 | | ...                       effect
598 | | ...                   );
    | |_______________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:608:29
    |
608 | / ...                   debug!(
609 | | ...                       "(Combat.do_fire_actions) {} has no sand to deploy against {}.",
610 | | ...                       target.get_name(),
611 | | ...                       attacker.get_name()
612 | | ...                   );
    | |_______________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/combat.rs:621:21
    |
621 | /                     debug!(
622 | |                         "(Combat.do_fire_actions) {} fires {} at {}.",
623 | |                         attacker.get_name(),
624 | |                         String::from(&weapon.kind),
625 | |                         target.get_name()
626 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/combat.rs:653:29
    |
653 | ...                   error!("Barbette sand mount not supported.");
    |                       -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/combat.rs:657:29
    |
657 | ...                   error!("Bay sand mount not supported.");
    |                       --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:103:13
    |
103 |             debug!("(best_guess) Making guess based on velocity");
    |             ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:115:13
    |
115 |             debug!("(best_guess) Making guess given zero differences.");
    |             ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:124:13
    |
124 |             debug!("(best_guess) Making guess based on distance.");
    |             ------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:148:13
    |
148 |             debug!("(best_guess) t_a: {}, t_b: {}", t_a, t_b);
    |             ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:134:17
    |
134 |                 error!("(best_guess) Unable to compute best guess.  Root part is negative.");
    |                 ---------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:154:17
    |
154 |                 error!("(best_guess) Unable to compute best guess.  Both times are negative.");
    |                 ------------------------------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:166:13
    |
166 |             warn!("(compute_flight_path) Attempt {}", attempt);
    |             -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:173:13
    |
173 |             info!("(compute_flight_path) Params is {:?}", self);
    |             --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:174:13
    |
174 |             info!("(compute_flight_path) Initial is {:?}", initial);
    |             ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:221:13
    |
221 | /             info!(
222 | |                 "(compute_flight_path) Computed path with a_1: {:?}, a_2: {:?}, t_1: {:?}, t_2: {:?}",
223 | |                 a_1, a_2, t_1, t_2
224 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:178:17
    |
178 | /                 info!(
179 | |                     "iter = {}\t|| |r(x)| = {:0.4?}\tx = {:0.2?}\trx = {:0.2?}",
180 | |                     state.iter(),
181 | |                     state.norm(),
182 | |                     state.x(),
183 | |                     state.rx()
184 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:189:17
    |
189 | /                 warn!(
190 | |                     "Unable to solve flight path with params: {:?} with error: {}.",
191 | |                     self, e
192 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:200:21
    |
200 | /                     warn!(
201 | |                         "Unable to solve flight path with params: {:?} with norm: {:0.4?}.",
202 | |                         self, norm
203 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:245:21
    |
245 | /                     info!("(compute_flight_path)\tAccelerate from {:0.0?} at {:0.1?} m/s^2 for {:0.0?}s. New Pos: {:0.0?}, New Vel: {:0.0?}", 
246 | |                     pos, accel, delta, new_pos, new_vel);
    | |________________________________________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:375:9
    |
375 |         info!("(TargetParams.solve) Solving with guess {:?}", guess);
    |         ------------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:382:17
    |
382 | /                 debug!(
383 | |                     "iter = {}\t|| |r(x)| = {:0.4?}\tx = {:0.2?}\trx = {:0.2?}",
384 | |                     state.iter(),
385 | |                     state.norm(),
386 | |                     state.x(),
387 | |                     state.rx()
388 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:442:9
    |
442 | /         debug!(
443 | |             "(compute_target_path) time guess is {} based on distance = {}, max_accel = {}",
444 | |             guess_t, distance, self.max_acceleration
445 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:428:13
    |
428 |             info!("(compute_target_path) No need to compute flight path.");
    |             -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:462:17
    |
462 | /                 debug!(
463 | |                     "(compute_target_path) First attempt worked. Acceleration: {:?}, time: {:?}.",
464 | |                     a, t
465 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:467:21
    |
467 |                     warn!("(compute_target_path) First attempt worked we might be going to fast to detect impact!");
    |                     ----------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:476:17
    |
476 | /                 debug!(
477 | |                     "Second attempt (couldn't get there in one round) taking into account target velocity."
478 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:481:25
    |
481 | /                         error!(
482 | |                             "Unable to solve target path with params {:?} and error {}",
483 | |                             self, e
484 | |                         );
    | |_________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/computer.rs:488:25
    |
488 |                         debug!("(compute_target_path) Second attempt worked.",);
    |                         ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/computer.rs:501:17
    |
501 | /                 debug!(
502 | |                     "(compute_target_path) First attempt failed with error {:?}.",
503 | |                     e
504 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/entity.rs:116:19
    |
116 |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `coverage`
   --> src/entity.rs:121:19
    |
121 |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `coverage`
   --> src/entity.rs:126:19
    |
126 |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:104:9
    |
104 |         info!("Load scenario file \"{}\".", file_name);
    |         ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:118:13
    |
118 |             debug!("Loaded entity {:?}", ship.read().unwrap());
    |             -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:123:13
    |
123 |             debug!("Loaded entity {:?}", planet.read().unwrap());
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:128:13
    |
128 |             debug!("Loaded entity {:?}", missile.read().unwrap());
    |             ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/entity.rs:161:9
    |
161 | /         debug!(
162 | |             "Add planet {} with position {:?},  color {:?}, primary {}, radius {:?}, mass {:?}, ",
163 | |             name,
164 | |             position,
...   |
168 | |             mass
169 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:204:9
    |
204 |         debug!("Added planet with fixed gravity wells {:?}", entity);
    |         ------------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:247:9
    |
247 |         debug!("(Entities.launch_missile) Added missile {}", &name);
    |         ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:283:25
    |
283 |                         error!("Could not launch missile: {}", msg);
    |                         ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/entity.rs:338:25
    |
338 | /                         info!(
339 | |                             "(Entity.update_all) Missile impact on {} by missile {}.",
340 | |                             ship, missile
341 | |                         );
    | |_________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:345:47
    |
345 | ...                   .map_or_else(|| { warn!("Cannot find target {} for missile. It may have been destroyed.", ship); None},
    |                                         ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/entity.rs:361:29
    |
361 | / ...                   debug!(
362 | | ...                       "(Entity.update_all) Missile {} exhausted at position {:?}.",
363 | | ...                       missile, missile_pos
364 | | ...                   );
    | |_______________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:372:25
    |
372 |                         debug!("(Entity.update_all) Removing missile {}", name);
    |                         ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/entity.rs:400:29
    |
400 | / ...                   debug!(
401 | | ...                       "(Entity.update_all) Ship {} destroyed at position {:?}.",
402 | | ...                       name, pos
403 | | ...                   );
    | |_______________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:423:13
    |
423 |             debug!("(Entity.update_all) Removing missile {}", name);
    |             ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/entity.rs:428:13
    |
428 |             debug!("(Entity.update_all) Removing ship {}", name);
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/missile.rs:63:9
   |
63 | /         debug!(
64 | |             "(Missile.new) Creating initial missile acceleration and calling targeting computer for missile {} with params: {:?}",
65 | |             name, params
66 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/missile.rs:113:9
    |
113 |         debug!("Updating missile {:?}", self.name);
    |         ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/missile.rs:117:13
    |
117 | /             debug!(
118 | |                 "(update) Computing path for missile {} targeting {}: End pos: {:0.0?} End vel: {:0.0?}",
119 | |                 self.name,
120 | |                 target.get_name(),
121 | |                 target.get_position(),
122 | |                 target.get_velocity()
123 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/missile.rs:133:13
    |
133 | /             debug!(
134 | |                 "(update) Call targeting computer for missile {} with params: {:0.0?}",
135 | |                 self.name, params
136 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/missile.rs:148:13
    |
148 | /             debug!(
149 | |                 "(update) Computed path: {:?} with expected time to impact of {} turns.",
150 | |                 path,
151 | |                 path.path.len() - 1
152 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/missile.rs:179:13
    |
179 | /             debug!(
180 | |                 "(update) Missile {} is {:0.0} away from target {}",
181 | |                 self.name,
182 | |                 (self.position - target.get_position()).magnitude(),
183 | |                 target.get_name()
184 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:58:19
    |
58  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/missile.rs:141:21
    |
141 |                     error!("(update) Unable to compute path for missile {}", self.name);
    |                     ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/missile.rs:186:17
    |
186 | /                 debug!(
187 | |                     "(update) Missile {} impacted target {}",
188 | |                     self.name,
189 | |                     target.get_name()
190 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/missile.rs:199:13
    |
199 |             info!("(update) Missile {} out of propellant", self.name);
    |             --------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/planet.rs:108:9
    |
108 | /         debug!(
109 | |             "Gravity radius 025: {:?}: given radius {:?} and gravity_radius {}",
110 | |             gravity_radius_025,
111 | |             self.radius,
112 | |             gravity_radius(0.25, self.mass)
113 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/planet.rs:114:9
    |
114 | /         info!(
115 | |             "(planet.reset_gravity_wells) Planet {} has gravity wells {:?}, {:?}, {:?}, {:?}",
116 | |             self.name, gravity_radius_2, gravity_radius_1, gravity_radius_05, gravity_radius_025
117 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/planet.rs:137:9
    |
137 | /         debug!("(Planet.calculate_rotational_velocity) Planet {} orbit radius = {:?}, speed = {}, tangent = {:?}, tangent*speed = {:?}",
138 | |             self.get_name(), orbit_radius, speed, tangent, tangent*speed);
    | |_________________________________________________________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/planet.rs:170:9
    |
170 |         debug!("(Planet.update) Updating planet {:?}", self.name);
    |         --------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/planet.rs:188:13
    |
188 | /             debug!(
189 | |                 "(Planet.update) Planet {} old velocity {:?} new velocity: {:?}",
190 | |                 self.name, orig_velocity, self.velocity
191 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/planet.rs:193:13
    |
193 |             debug!("(Planet.update) Planet {} has no primary.", self.name);
    |             -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:26:19
   |
26 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/server.rs:39:9
   |
39 | /         info!(
40 | |             "(Server.login) Received and processing login request. {:?}",
41 | |             &login
42 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:10:19
   |
10 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/server.rs:50:9
   |
50 | /         debug!(
51 | |             "(Server.login) Authenticated user {} with session key  {}.",
52 | |             email, session_key
53 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
  --> src/cov_util.rs:26:19
   |
26 |           #[cfg(not(coverage))]
   |                     ^^^^^^^^
   |
  ::: src/server.rs:65:9
   |
65 | /         info!(
66 | |             "(Server.add_ship) Received and processing add ship request. {:?}",
67 | |             ship
68 | |         );
   | |_________- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:124:13
    |
124 |             warn!("Unable to find entity named {} to remove", name);
    |             ------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:166:9
    |
166 |         debug!("(/update) Effects: {:?}", effects);
    |         ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/server.rs:178:9
    |
178 | /         info!(
179 | |             "(/compute_path) Received and processing compute path request. {:?}",
180 | |             msg
181 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/server.rs:183:9
    |
183 | /         debug!(
184 | |             "(/compute_path) Computing path for entity: {} End pos: {:?} End vel: {:?}",
185 | |             msg.entity_name, msg.end_pos, msg.end_vel
186 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:223:9
    |
223 |         debug!("(/compute_path)Call computer with params: {:?}", params);
    |         ---------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/server.rs:232:9
    |
232 | /         debug!(
233 | |             "(/compute_path) Plan has real acceleration of {} vs max_accel of {}",
234 | |             plan.plan.0 .0.magnitude(),
235 | |             max_accel / G
236 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:243:9
    |
243 |         debug!("(/compute_path) Flight path response: {}", json);
    |         -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/server.rs:210:13
    |
210 | /             debug!("(/compute_path) Standoff distance: {:0.0?} Adjusted end pos: {:0.0?} Original end pos {:0.0?}Difference {:0.0?}", msg.standoff_distance, adjusted_end_pos, msg.end_pos, 
211 | |                     (adjusted_end_pos - msg.end_pos).magnitude());
    | |_________________________________________________________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:226:13
    |
226 |             debug!("(/compute_path) Plan: {:?}", plan);
    |             ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:249:9
    |
249 |         info!("Received and processing get request.");
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:252:17
    |
252 |                 info!("(/) Entities: {:?}", json);
    |                 --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:262:9
    |
262 |         info!("(lib.get_rng) Server in TEST mode for random numbers (constant seed of 0).");
    |         ----------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/server.rs:266:9
    |
266 |         debug!("(lib.get_rng) Server in standard mode for random numbers.");
    |         ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:193:9
    |
193 |         debug!("(Ship.set_flight_plan) ship: {}, max_accel: {} new_plan: {:?} with magnitude on first accel of {}", self.name, max_accel, new_plan, new_plan.0 .0.magnitude());
    |         ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:271:9
    |
271 |         debug!("(Ship.update) Updating ship {:?}", self.name);
    |         ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:275:13
    |
275 |             debug!("(Ship.update) Ship {} is destroyed.", self.name);
    |             -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:282:13
    |
282 |             debug!("(Ship.update) No acceleration for {}: move at velocity {:0.0?} for time {}, position now {:0.0?}", self.name, self.velocity, DELTA_TIME, self.position);
    |             --------------------------------------------------------------------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/ship.rs:295:17
    |
295 | /                 debug!(
296 | |                     "(Ship.update) Accelerate at {:0.3?} m/s for time {}",
297 | |                     accel * G,
298 | |                     duration
299 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/ship.rs:300:17
    |
300 | /                 debug!(
301 | |                     "(Ship.update) New velocity: {:0.0?} New position: {:0.0?}",
302 | |                     self.velocity, self.position
303 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:357:9
    |
357 |         info!("(config_test_ship_templates) attempting to set SHIP_TEMPLATES twice!");
    |         ----------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/ship.rs:661:13
    |
661 |             debug!("(FlightPlan.advance_time) self: {:?} new_first: {:?} second: {:?} time: {} first_time: {}", self, new_first, second, time, first_time);
    |             ---------------------------------------------------------------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/lib.rs:100:5
    |
100 | /     info!(
101 | |         "Request: {:?}\n\tmethod: {}\n\turi: {}",
102 | |         req,
103 | |         req.method(),
104 | |         req.uri().path()
105 | |     );
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:112:17
    |
112 |                 debug!("(lib.handleRequest) User {} authorized.", email);
    |                 -------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/lib.rs:115:17
    |
115 | /                 warn!(
116 | |                     "(lib.handleRequest) User not authorized with status {} and message {}.",
117 | |                     status, msg
118 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:127:9
    |
127 |         warn!("(lib.handleRequest) Server in test mode.  All users authorized.");
    |         ------------------------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:129:9
    |
129 |         debug!("(lib.handleRequest) Ignore authentication for this request.");
    |         --------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:150:29
    |
150 |             let login_msg = deserialize_body_or_respond!(req, LoginMsg);
    |                             ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:150:29
    |
150 |             let login_msg = deserialize_body_or_respond!(req, LoginMsg);
    |                             ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:150:29
    |
150 |             let login_msg = deserialize_body_or_respond!(req, LoginMsg);
    |                             ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/lib.rs:154:21
    |
154 | /                     debug!(
155 | |                         "(lib.handleRequest/login) Received and processing login request. {:?}",
156 | |                         msg
157 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |           #[cfg(not(coverage))]
    |                     ^^^^^^^^
    |
   ::: src/lib.rs:170:21
    |
170 | /                     warn!(
171 | |                         "(lib.handleRequest/login) Error logging in so returning UNAUTHORIZED: {}",
172 | |                         err
173 | |                     );
    | |_____________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:184:24
    |
184 |             let ship = deserialize_body_or_respond!(req, AddShipMsg);
    |                        --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:184:24
    |
184 |             let ship = deserialize_body_or_respond!(req, AddShipMsg);
    |                        --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:184:24
    |
184 |             let ship = deserialize_body_or_respond!(req, AddShipMsg);
    |                        --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:192:26
    |
192 |             let planet = deserialize_body_or_respond!(req, AddPlanetMsg);
    |                          ----------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:192:26
    |
192 |             let planet = deserialize_body_or_respond!(req, AddPlanetMsg);
    |                          ----------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:192:26
    |
192 |             let planet = deserialize_body_or_respond!(req, AddPlanetMsg);
    |                          ----------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:200:24
    |
200 |             let name = deserialize_body_or_respond!(req, RemoveEntityMsg);
    |                        -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:200:24
    |
200 |             let name = deserialize_body_or_respond!(req, RemoveEntityMsg);
    |                        -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:200:24
    |
200 |             let name = deserialize_body_or_respond!(req, RemoveEntityMsg);
    |                        -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:208:13
    |
208 |             info!("Received and processing plan set request.");
    |             -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:209:28
    |
209 |             let plan_msg = deserialize_body_or_respond!(req, SetPlanMsg);
    |                            --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:209:28
    |
209 |             let plan_msg = deserialize_body_or_respond!(req, SetPlanMsg);
    |                            --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:209:28
    |
209 |             let plan_msg = deserialize_body_or_respond!(req, SetPlanMsg);
    |                            --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:214:21
    |
214 |                     warn!("(/set_plan)) Error setting plan: {}", err);
    |                     ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:225:13
    |
225 |             info!("(/update) Received and processing update request.");
    |             ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:230:32
    |
230 |             let fire_actions = deserialize_body_or_respond!(req, FireActionsMsg);
    |                                ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:230:32
    |
230 |             let fire_actions = deserialize_body_or_respond!(req, FireActionsMsg);
    |                                ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:230:32
    |
230 |             let fire_actions = deserialize_body_or_respond!(req, FireActionsMsg);
    |                                ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:246:23
    |
246 |             let msg = deserialize_body_or_respond!(req, ComputePathMsg);
    |                       ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:10:19
    |
10  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:246:23
    |
246 |             let msg = deserialize_body_or_respond!(req, ComputePathMsg);
    |                       ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `debug` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:42:19
    |
42  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:246:23
    |
246 |             let msg = deserialize_body_or_respond!(req, ComputePathMsg);
    |                       ------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `warn` which comes from the expansion of the macro `deserialize_body_or_respond` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:262:13
    |
262 |             info!("Received and processing get request.");
    |             --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:277:13
    |
277 |             info!("Received and processing get designs request.");
    |             ----------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `coverage`
   --> src/cov_util.rs:26:19
    |
26  |         #[cfg(not(coverage))]
    |                   ^^^^^^^^
    |
   ::: src/lib.rs:292:13
    |
292 |             info!("Unknown method or URI on this request.  Returning 404.");
    |             --------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `info` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `callisto` (lib) generated 152 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.10s
